// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Checkout checkout
//
// swagger:model Checkout
type Checkout struct {

	// algorand qrcode
	AlgorandQrcode *CheckoutQRCode `json:"algorand_qrcode,omitempty"`

	// The unique reference id of the order
	RefID string `json:"ref_id,omitempty"`
}

// Validate validates this checkout
func (m *Checkout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorandQrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkout) validateAlgorandQrcode(formats strfmt.Registry) error {
	if swag.IsZero(m.AlgorandQrcode) { // not required
		return nil
	}

	if m.AlgorandQrcode != nil {
		if err := m.AlgorandQrcode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("algorand_qrcode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("algorand_qrcode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this checkout based on the context it is used
func (m *Checkout) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlgorandQrcode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkout) contextValidateAlgorandQrcode(ctx context.Context, formats strfmt.Registry) error {

	if m.AlgorandQrcode != nil {
		if err := m.AlgorandQrcode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("algorand_qrcode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("algorand_qrcode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Checkout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Checkout) UnmarshalBinary(b []byte) error {
	var res Checkout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
