// Code generated by go-swagger; DO NOT EDIT.

package crypto_checkout

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/crypto-checkout/server/models"
)

// PostOrdersOKCode is the HTTP code returned for type PostOrdersOK
const PostOrdersOKCode int = 200

/*PostOrdersOK Success

swagger:response postOrdersOK
*/
type PostOrdersOK struct {

	/*
	  In: Body
	*/
	Payload *models.Order `json:"body,omitempty"`
}

// NewPostOrdersOK creates PostOrdersOK with default headers values
func NewPostOrdersOK() *PostOrdersOK {

	return &PostOrdersOK{}
}

// WithPayload adds the payload to the post orders o k response
func (o *PostOrdersOK) WithPayload(payload *models.Order) *PostOrdersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post orders o k response
func (o *PostOrdersOK) SetPayload(payload *models.Order) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOrdersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostOrdersInternalServerErrorCode is the HTTP code returned for type PostOrdersInternalServerError
const PostOrdersInternalServerErrorCode int = 500

/*PostOrdersInternalServerError Internal server error

swagger:response postOrdersInternalServerError
*/
type PostOrdersInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostOrdersInternalServerError creates PostOrdersInternalServerError with default headers values
func NewPostOrdersInternalServerError() *PostOrdersInternalServerError {

	return &PostOrdersInternalServerError{}
}

// WithPayload adds the payload to the post orders internal server error response
func (o *PostOrdersInternalServerError) WithPayload(payload *models.Error) *PostOrdersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post orders internal server error response
func (o *PostOrdersInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOrdersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
