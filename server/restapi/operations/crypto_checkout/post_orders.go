// Code generated by go-swagger; DO NOT EDIT.

package crypto_checkout

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostOrdersHandlerFunc turns a function with the right signature into a post orders handler
type PostOrdersHandlerFunc func(PostOrdersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOrdersHandlerFunc) Handle(params PostOrdersParams) middleware.Responder {
	return fn(params)
}

// PostOrdersHandler interface for that can handle valid post orders params
type PostOrdersHandler interface {
	Handle(PostOrdersParams) middleware.Responder
}

// NewPostOrders creates a new http.Handler for the post orders operation
func NewPostOrders(ctx *middleware.Context, handler PostOrdersHandler) *PostOrders {
	return &PostOrders{Context: ctx, Handler: handler}
}

/* PostOrders swagger:route POST /orders crypto-checkout postOrders

Post new order

Post new order


*/
type PostOrders struct {
	Context *middleware.Context
	Handler PostOrdersHandler
}

func (o *PostOrders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostOrdersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
